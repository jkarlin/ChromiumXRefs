{"file_info_response":[{"return_code":1,"file_info":{"name":"src/net/http/http_auth.h","lines":"179","size":"6484","language":"c++","type":1,"md5":"30b4cf916d01851983e36f0660c89813","changelist_num":"c59068590b02e4c25544b62a5a9a5cf6863252b3","mime_type":"text/plain","generated":false,"package_name":"chromium","content":{"text":"// Copyright (c) 2011 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#ifndef NET_HTTP_HTTP_AUTH_H_\n#define NET_HTTP_HTTP_AUTH_H_\n\n#include \u003cmemory\u003e\n#include \u003cset\u003e\n#include \u003cstring\u003e\n\n#include \"net/base/auth.h\"\n#include \"net/base/net_export.h\"\n#include \"net/http/http_util.h\"\n\ntemplate \u003cclass T\u003e class scoped_refptr;\n\nnamespace net {\n\nclass HttpAuthHandler;\nclass HttpAuthHandlerFactory;\nclass HttpResponseHeaders;\nclass NetLogWithSource;\nclass SSLInfo;\n\n// Utility class for http authentication.\nclass NET_EXPORT_PRIVATE HttpAuth {\n public:\n  // Http authentication can be done the the proxy server, origin server,\n  // or both. This enum tracks who the target is.\n  enum Target {\n    AUTH_NONE = -1,\n    // We depend on the valid targets (!= AUTH_NONE) being usable as indexes\n    // in an array, so start from 0.\n    AUTH_PROXY = 0,\n    AUTH_SERVER = 1,\n    AUTH_NUM_TARGETS = 2,\n  };\n\n  // What the HTTP WWW-Authenticate/Proxy-Authenticate headers indicate about\n  // the previous authorization attempt.\n  enum AuthorizationResult {\n    AUTHORIZATION_RESULT_ACCEPT,   // The authorization attempt was accepted,\n                                   // although there still may be additional\n                                   // rounds of challenges.\n\n    AUTHORIZATION_RESULT_REJECT,   // The authorization attempt was rejected.\n\n    AUTHORIZATION_RESULT_STALE,    // (Digest) The nonce used in the\n                                   // authorization attempt is stale, but\n                                   // otherwise the attempt was valid.\n\n    AUTHORIZATION_RESULT_INVALID,  // The authentication challenge headers are\n                                   // poorly formed (the authorization attempt\n                                   // itself may have been fine).\n\n    AUTHORIZATION_RESULT_DIFFERENT_REALM,  // The authorization\n                                           // attempt was rejected,\n                                           // but the realm associated\n                                           // with the new challenge\n                                           // is different from the\n                                           // previous attempt.\n  };\n\n  // Describes where the identity used for authentication came from.\n  enum IdentitySource {\n    // Came from nowhere -- the identity is not initialized.\n    IDENT_SRC_NONE,\n\n    // The identity came from the auth cache, by doing a path-based\n    // lookup (premptive authorization).\n    IDENT_SRC_PATH_LOOKUP,\n\n    // The identity was extracted from a URL of the form:\n    // http://\u003cusername\u003e:\u003cpassword\u003e@host:port\n    IDENT_SRC_URL,\n\n    // The identity was retrieved from the auth cache, by doing a\n    // realm lookup.\n    IDENT_SRC_REALM_LOOKUP,\n\n    // The identity was provided by RestartWithAuth -- it likely\n    // came from a prompt (or maybe the password manager).\n    IDENT_SRC_EXTERNAL,\n\n    // The identity used the default credentials for the computer,\n    // on schemes that support single sign-on.\n    IDENT_SRC_DEFAULT_CREDENTIALS,\n  };\n\n  enum Scheme {\n    AUTH_SCHEME_BASIC = 0,\n    AUTH_SCHEME_DIGEST,\n    AUTH_SCHEME_NTLM,\n    AUTH_SCHEME_NEGOTIATE,\n    AUTH_SCHEME_SPDYPROXY,\n    AUTH_SCHEME_MOCK,\n    AUTH_SCHEME_MAX,\n  };\n\n  // Helper structure used by HttpNetworkTransaction to track\n  // the current identity being used for authorization.\n  struct Identity {\n    Identity();\n\n    IdentitySource source;\n    bool invalid;\n    AuthCredentials credentials;\n  };\n\n  // Get the name of the header containing the auth challenge\n  // (either WWW-Authenticate or Proxy-Authenticate).\n  static std::string GetChallengeHeaderName(Target target);\n\n  // Get the name of the header where the credentials go\n  // (either Authorization or Proxy-Authorization).\n  static std::string GetAuthorizationHeaderName(Target target);\n\n  // Returns a string representation of a Target value that can be used in log\n  // messages.\n  static std::string GetAuthTargetString(Target target);\n\n  // Returns a string representation of an authentication Scheme.\n  static const char* SchemeToString(Scheme scheme);\n\n  // Iterate through |response_headers|, and pick the best one that we support.\n  // Obtains the implementation class for handling the challenge, and passes it\n  // back in |*handler|. If no supported challenge was found, |*handler| is set\n  // to NULL.\n  //\n  // |disabled_schemes| is the set of schemes that we should not use.\n  //\n  // |origin| is used by the NTLM and Negotiation authentication scheme to\n  // construct the service principal name. It is ignored by other schemes.\n  //\n  // |ssl_info| is passed through to the scheme specific authentication handlers\n  // to use as appropriate.\n  static void ChooseBestChallenge(\n      HttpAuthHandlerFactory* http_auth_handler_factory,\n      const HttpResponseHeaders\u0026 response_headers,\n      const SSLInfo\u0026 ssl_info,\n      Target target,\n      const GURL\u0026 origin,\n      const std::set\u003cScheme\u003e\u0026 disabled_schemes,\n      const NetLogWithSource\u0026 net_log,\n      std::unique_ptr\u003cHttpAuthHandler\u003e* handler);\n\n  // Handle a 401/407 response from a server/proxy after a previous\n  // authentication attempt. For connection-based authentication schemes, the\n  // new response may be another round in a multi-round authentication sequence.\n  // For request-based schemes, a 401/407 response is typically treated like a\n  // rejection of the previous challenge, except in the Digest case when a\n  // \"stale\" attribute is present.\n  //\n  // |handler| must be non-NULL, and is the HttpAuthHandler from the previous\n  // authentication round.\n  //\n  // |response_headers| must contain the new HTTP response.\n  //\n  // |target| specifies whether the authentication challenge response came\n  // from a server or a proxy.\n  //\n  // |disabled_schemes| are the authentication schemes to ignore.\n  //\n  // |challenge_used| is the text of the authentication challenge used in\n  // support of the returned AuthorizationResult. If no headers were used for\n  // the result (for example, all headers have unknown authentication schemes),\n  // the value is cleared.\n  static AuthorizationResult HandleChallengeResponse(\n      HttpAuthHandler* handler,\n      const HttpResponseHeaders\u0026 response_headers,\n      Target target,\n      const std::set\u003cScheme\u003e\u0026 disabled_schemes,\n      std::string* challenge_used);\n};\n\n}  // namespace net\n\n#endif  // NET_HTTP_HTTP_AUTH_H_\n"},"gob_info":{"repo":"chromium/chromium/src","commit":"c59068590b02e4c25544b62a5a9a5cf6863252b3","path":"net/http/http_auth.h"}}}],"elapsed_ms":20}