{"file_info_response":[{"return_code":1,"file_info":{"name":"src/net/url_request/url_request_context.h","lines":"345","size":"12358","language":"c++","type":1,"md5":"682913921758e6e3b20d7022596b7993","changelist_num":"4053529b6fe405697beaac4ff45f759a61f833c3","mime_type":"text/plain","generated":false,"package_name":"chromium","content":{"text":"// Copyright (c) 2012 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// This class represents contextual information (cookies, cache, etc.)\n// that's necessary when processing resource requests.\n\n#ifndef NET_URL_REQUEST_URL_REQUEST_CONTEXT_H_\n#define NET_URL_REQUEST_URL_REQUEST_CONTEXT_H_\n\n#include \u003cmemory\u003e\n#include \u003cset\u003e\n#include \u003cstring\u003e\n\n#include \"base/macros.h\"\n#include \"base/memory/ref_counted.h\"\n#include \"base/memory/weak_ptr.h\"\n#include \"base/threading/non_thread_safe.h\"\n#include \"base/trace_event/memory_dump_provider.h\"\n#include \"net/base/net_export.h\"\n#include \"net/base/request_priority.h\"\n#include \"net/http/http_network_session.h\"\n#include \"net/http/http_server_properties.h\"\n#include \"net/http/transport_security_state.h\"\n#include \"net/ssl/ssl_config_service.h\"\n#include \"net/traffic_annotation/network_traffic_annotation.h\"\n#include \"net/url_request/url_request.h\"\n\nnamespace base {\nnamespace trace_event {\nclass ProcessMemoryDump;\n}\n}\n\nnamespace net {\nclass CertVerifier;\nclass ChannelIDService;\nclass CookieStore;\nclass CTPolicyEnforcer;\nclass CTVerifier;\nclass HostResolver;\nclass HttpAuthHandlerFactory;\nclass HttpTransactionFactory;\nclass HttpUserAgentSettings;\nclass NetLog;\nclass NetworkDelegate;\nclass NetworkQualityEstimator;\nclass ReportingService;\nclass SdchManager;\nclass ProxyService;\nclass URLRequest;\nclass URLRequestBackoffManager;\nclass URLRequestJobFactory;\nclass URLRequestThrottlerManager;\n\n// Subclass to provide application-specific context for URLRequest\n// instances. URLRequestContext does not own these member variables, since they\n// may be shared with other contexts. URLRequestContextStorage can be used for\n// automatic lifetime management. Most callers should use an existing\n// URLRequestContext rather than creating a new one, as guaranteeing that the\n// URLRequestContext is destroyed before its members can be difficult.\nclass NET_EXPORT URLRequestContext\n    : NON_EXPORTED_BASE(public base::NonThreadSafe),\n      public base::trace_event::MemoryDumpProvider {\n public:\n  URLRequestContext();\n  ~URLRequestContext() override;\n\n  // Copies the state from |other| into this context.\n  void CopyFrom(const URLRequestContext* other);\n\n  // May return nullptr if this context doesn't have an associated network\n  // session.\n  const HttpNetworkSession::Params* GetNetworkSessionParams() const;\n\n  // May return nullptr if this context doesn't have an associated network\n  // session.\n  const HttpNetworkSession::Context* GetNetworkSessionContext() const;\n\n  // This function should not be used in Chromium, please use the version with\n  // NetworkTrafficAnnotationTag in the future.\n  std::unique_ptr\u003cURLRequest\u003e CreateRequest(\n      const GURL\u0026 url,\n      RequestPriority priority,\n      URLRequest::Delegate* delegate) const;\n\n  // |traffic_annotation| is metadata about the network traffic send via this\n  // URLRequest, see net::DefineNetworkTrafficAnnotation. Note that:\n  // - net provides the API for tagging requests with an opaque identifier.\n  // - tools/traffic_annotation/traffic_annotation.proto contains the Chrome\n  // specific .proto describing the verbose annotation format that Chrome's\n  // callsites are expected to follow.\n  // - tools/traffic_annotation/ contains sample and template for annotation and\n  // tools will be added for verification following crbug.com/690323.\n  std::unique_ptr\u003cURLRequest\u003e CreateRequest(\n      const GURL\u0026 url,\n      RequestPriority priority,\n      URLRequest::Delegate* delegate,\n      NetworkTrafficAnnotationTag traffic_annotation) const;\n\n  NetLog* net_log() const { return net_log_; }\n\n  void set_net_log(NetLog* net_log) {\n    net_log_ = net_log;\n  }\n\n  HostResolver* host_resolver() const {\n    return host_resolver_;\n  }\n\n  void set_host_resolver(HostResolver* host_resolver) {\n    host_resolver_ = host_resolver;\n  }\n\n  CertVerifier* cert_verifier() const {\n    return cert_verifier_;\n  }\n\n  void set_cert_verifier(CertVerifier* cert_verifier) {\n    cert_verifier_ = cert_verifier;\n  }\n\n  ChannelIDService* channel_id_service() const {\n    return channel_id_service_;\n  }\n\n  void set_channel_id_service(\n      ChannelIDService* channel_id_service) {\n    channel_id_service_ = channel_id_service;\n  }\n\n  // Get the proxy service for this context.\n  ProxyService* proxy_service() const { return proxy_service_; }\n  void set_proxy_service(ProxyService* proxy_service) {\n    proxy_service_ = proxy_service;\n  }\n\n  // Get the ssl config service for this context.\n  SSLConfigService* ssl_config_service() const {\n    return ssl_config_service_.get();\n  }\n  void set_ssl_config_service(SSLConfigService* service) {\n    ssl_config_service_ = service;\n  }\n\n  // Gets the HTTP Authentication Handler Factory for this context.\n  // The factory is only valid for the lifetime of this URLRequestContext\n  HttpAuthHandlerFactory* http_auth_handler_factory() const {\n    return http_auth_handler_factory_;\n  }\n  void set_http_auth_handler_factory(HttpAuthHandlerFactory* factory) {\n    http_auth_handler_factory_ = factory;\n  }\n\n  // Gets the http transaction factory for this context.\n  HttpTransactionFactory* http_transaction_factory() const {\n    return http_transaction_factory_;\n  }\n  void set_http_transaction_factory(HttpTransactionFactory* factory) {\n    http_transaction_factory_ = factory;\n  }\n\n  void set_network_delegate(NetworkDelegate* network_delegate) {\n    network_delegate_ = network_delegate;\n  }\n  NetworkDelegate* network_delegate() const { return network_delegate_; }\n\n  void set_http_server_properties(\n      HttpServerProperties* http_server_properties) {\n    http_server_properties_ = http_server_properties;\n  }\n  HttpServerProperties* http_server_properties() const {\n    return http_server_properties_;\n  }\n\n  // Gets the cookie store for this context (may be null, in which case\n  // cookies are not stored).\n  CookieStore* cookie_store() const { return cookie_store_; }\n  void set_cookie_store(CookieStore* cookie_store);\n\n  TransportSecurityState* transport_security_state() const {\n    return transport_security_state_;\n  }\n  void set_transport_security_state(\n      TransportSecurityState* state) {\n    transport_security_state_ = state;\n  }\n\n  CTVerifier* cert_transparency_verifier() const {\n    return cert_transparency_verifier_;\n  }\n  void set_cert_transparency_verifier(CTVerifier* verifier) {\n    cert_transparency_verifier_ = verifier;\n  }\n\n  CTPolicyEnforcer* ct_policy_enforcer() const { return ct_policy_enforcer_; }\n  void set_ct_policy_enforcer(CTPolicyEnforcer* enforcer) {\n    ct_policy_enforcer_ = enforcer;\n  }\n\n  const URLRequestJobFactory* job_factory() const { return job_factory_; }\n  void set_job_factory(const URLRequestJobFactory* job_factory) {\n    job_factory_ = job_factory;\n  }\n\n  // May return nullptr.\n  URLRequestThrottlerManager* throttler_manager() const {\n    return throttler_manager_;\n  }\n  void set_throttler_manager(URLRequestThrottlerManager* throttler_manager) {\n    throttler_manager_ = throttler_manager;\n  }\n\n  // May return nullptr.\n  URLRequestBackoffManager* backoff_manager() const { return backoff_manager_; }\n  void set_backoff_manager(URLRequestBackoffManager* backoff_manager) {\n    backoff_manager_ = backoff_manager;\n  }\n\n  // May return nullptr.\n  SdchManager* sdch_manager() const { return sdch_manager_; }\n  void set_sdch_manager(SdchManager* sdch_manager) {\n    sdch_manager_ = sdch_manager;\n  }\n\n  // Gets the URLRequest objects that hold a reference to this\n  // URLRequestContext.\n  const std::set\u003cconst URLRequest*\u003e\u0026 url_requests() const {\n    return url_requests_;\n  }\n\n  void InsertURLRequest(const URLRequest* request) const;\n\n  void RemoveURLRequest(const URLRequest* request) const;\n\n  // CHECKs that no URLRequests using this context remain. Subclasses should\n  // additionally call AssertNoURLRequests() within their own destructor,\n  // prior to implicit destruction of subclass-owned state.\n  void AssertNoURLRequests() const;\n\n  // Get the underlying |HttpUserAgentSettings| implementation that provides\n  // the HTTP Accept-Language and User-Agent header values.\n  const HttpUserAgentSettings* http_user_agent_settings() const {\n    return http_user_agent_settings_;\n  }\n  void set_http_user_agent_settings(\n      const HttpUserAgentSettings* http_user_agent_settings) {\n    http_user_agent_settings_ = http_user_agent_settings;\n  }\n\n  // Gets the NetworkQualityEstimator associated with this context.\n  // May return nullptr.\n  NetworkQualityEstimator* network_quality_estimator() const {\n    return network_quality_estimator_;\n  }\n  void set_network_quality_estimator(\n      NetworkQualityEstimator* network_quality_estimator) {\n    network_quality_estimator_ = network_quality_estimator;\n  }\n\n  ReportingService* reporting_service() const { return reporting_service_; }\n  void set_reporting_service(ReportingService* reporting_service) {\n    reporting_service_ = reporting_service;\n  }\n\n  void set_enable_brotli(bool enable_brotli) { enable_brotli_ = enable_brotli; }\n\n  bool enable_brotli() const { return enable_brotli_; }\n\n  // Sets the |check_cleartext_permitted| flag, which controls whether to check\n  // system policy before allowing a cleartext http or ws request.\n  void set_check_cleartext_permitted(bool check_cleartext_permitted) {\n    check_cleartext_permitted_ = check_cleartext_permitted;\n  }\n\n  // Returns current value of the |check_cleartext_permitted| flag.\n  bool check_cleartext_permitted() const { return check_cleartext_permitted_; }\n\n  // Sets a name for this URLRequestContext. Currently the name is used in\n  // MemoryDumpProvier to annotate memory usage. The name does not need to be\n  // unique.\n  void set_name(const char* name) { name_ = name; }\n\n  // MemoryDumpProvider implementation:\n  bool OnMemoryDump(const base::trace_event::MemoryDumpArgs\u0026 args,\n                    base::trace_event::ProcessMemoryDump* pmd) override;\n\n private:\n  // ---------------------------------------------------------------------------\n  // Important: When adding any new members below, consider whether they need to\n  // be added to CopyFrom.\n  // ---------------------------------------------------------------------------\n\n  // Ownership for these members are not defined here. Clients should either\n  // provide storage elsewhere or have a subclass take ownership.\n  NetLog* net_log_;\n  HostResolver* host_resolver_;\n  CertVerifier* cert_verifier_;\n  ChannelIDService* channel_id_service_;\n  HttpAuthHandlerFactory* http_auth_handler_factory_;\n  ProxyService* proxy_service_;\n  scoped_refptr\u003cSSLConfigService\u003e ssl_config_service_;\n  NetworkDelegate* network_delegate_;\n  HttpServerProperties* http_server_properties_;\n  const HttpUserAgentSettings* http_user_agent_settings_;\n  CookieStore* cookie_store_;\n  TransportSecurityState* transport_security_state_;\n  CTVerifier* cert_transparency_verifier_;\n  CTPolicyEnforcer* ct_policy_enforcer_;\n  HttpTransactionFactory* http_transaction_factory_;\n  const URLRequestJobFactory* job_factory_;\n  URLRequestThrottlerManager* throttler_manager_;\n  URLRequestBackoffManager* backoff_manager_;\n  SdchManager* sdch_manager_;\n  NetworkQualityEstimator* network_quality_estimator_;\n  ReportingService* reporting_service_;\n\n  // ---------------------------------------------------------------------------\n  // Important: When adding any new members below, consider whether they need to\n  // be added to CopyFrom.\n  // ---------------------------------------------------------------------------\n\n  mutable std::set\u003cconst URLRequest*\u003e url_requests_;\n\n  // Enables Brotli Content-Encoding support.\n  bool enable_brotli_;\n  // Enables checking system policy before allowing a cleartext http or ws\n  // request. Only used on Android.\n  bool check_cleartext_permitted_;\n\n  // An optional name which can be set to describe this URLRequestContext.\n  // Used in MemoryDumpProvier to annotate memory usage. The name does not need\n  // to be unique.\n  const char* name_;\n\n  // The largest number of outstanding URLRequests that have been created by\n  // |this| and are not yet destroyed. This doesn't need to be in CopyFrom.\n  mutable size_t largest_outstanding_requests_count_seen_;\n\n  DISALLOW_COPY_AND_ASSIGN(URLRequestContext);\n};\n\n}  // namespace net\n\n#endif  // NET_URL_REQUEST_URL_REQUEST_CONTEXT_H_\n"},"gob_info":{"repo":"chromium/chromium/src","commit":"4053529b6fe405697beaac4ff45f759a61f833c3","path":"net/url_request/url_request_context.h"}}}],"elapsed_ms":25}