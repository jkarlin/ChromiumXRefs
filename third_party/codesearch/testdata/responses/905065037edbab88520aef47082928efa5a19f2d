{"file_info_response":[{"return_code":1,"file_info":{"name":"src/apps/launcher.h","lines":"110","size":"4167","language":"c++","type":1,"md5":"e7043002c00b065246c2821a5f0491be","changelist_num":"65dcbb2ab5805377de065aaa1dbc87215df460f7","mime_type":"text/plain","generated":false,"package_name":"chromium","content":{"text":"// Copyright 2013 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#ifndef APPS_LAUNCHER_H_\n#define APPS_LAUNCHER_H_\n\n#include \u003cmemory\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n\n#include \"extensions/common/api/app_runtime.h\"\n#include \"extensions/common/constants.h\"\n\nclass GURL;\n\nnamespace base {\nclass CommandLine;\nclass FilePath;\n}\n\nnamespace content {\nclass BrowserContext;\n}\n\nnamespace extensions {\nclass Extension;\nnamespace api {\nnamespace app_runtime {\nstruct ActionData;\n}\n}\n}\n\nnamespace apps {\n\n// Launches the platform app |app|. Creates appropriate launch data for the\n// |command_line| fields present. |app| and |context| must not be NULL. An empty\n// |command_line| means there is no launch data. If non-empty,\n// |current_directory| is used to expand any relative paths on the command line.\n// |source| is one of the enumerated values which trace how the app is launched.\nvoid LaunchPlatformAppWithCommandLine(\n    content::BrowserContext* context,\n    const extensions::Extension* app,\n    const base::CommandLine\u0026 command_line,\n    const base::FilePath\u0026 current_directory,\n    extensions::AppLaunchSource source,\n    extensions::api::app_runtime::PlayStoreStatus play_store_status =\n        extensions::api::app_runtime::PlayStoreStatus::\n            PLAY_STORE_STATUS_UNKNOWN);\n\n// As above but includes |launch_id|, an id that can be passed to\n// an app when launched in order to support multiple shelf items per app.\nvoid LaunchPlatformAppWithCommandLineAndLaunchId(\n    content::BrowserContext* context,\n    const extensions::Extension* app,\n    const std::string\u0026 launch_id,\n    const base::CommandLine\u0026 command_line,\n    const base::FilePath\u0026 current_directory,\n    extensions::AppLaunchSource source,\n    extensions::api::app_runtime::PlayStoreStatus play_store_status =\n        extensions::api::app_runtime::PlayStoreStatus::\n            PLAY_STORE_STATUS_UNKNOWN);\n\n// Launches the platform app |app| by issuing an onLaunched event with the\n// contents of |file_path| available through the launch data.\nvoid LaunchPlatformAppWithPath(content::BrowserContext* context,\n                               const extensions::Extension* app,\n                               const base::FilePath\u0026 file_path);\n\n// Launches the platform app |app| with the specific |action_data|. |file_path|\n// is an optional argument and if present contains the file that the app should\n// open w.r.t. the given action.\nvoid LaunchPlatformAppWithAction(\n    content::BrowserContext* context,\n    const extensions::Extension* app,\n    std::unique_ptr\u003cextensions::api::app_runtime::ActionData\u003e action_data,\n    const base::FilePath\u0026 file_path);\n\n// Launches the platform app |app|. |source| tells us how the app is launched.\nvoid LaunchPlatformApp(content::BrowserContext* context,\n                       const extensions::Extension* app,\n                       extensions::AppLaunchSource source);\n\n// Launches the platform app |app| with |handler_id| and the contents of\n// |file_paths| available through the launch data. |handler_id| corresponds to\n// the id of the file_handlers item in the manifest that resulted in a match\n// that triggered this launch.\nvoid LaunchPlatformAppWithFileHandler(\n    content::BrowserContext* context,\n    const extensions::Extension* app,\n    const std::string\u0026 handler_id,\n    const std::vector\u003cbase::FilePath\u003e\u0026 file_paths);\n\n// Launches the platform app |app| with |handler_id|, |url| and |referrer_url|\n// available through the launch data. |handler_id| corresponds to the id of the\n// file_handlers item in the manifest that resulted in a match that triggered\n// this launch.\nvoid LaunchPlatformAppWithUrl(content::BrowserContext* context,\n                              const extensions::Extension* app,\n                              const std::string\u0026 handler_id,\n                              const GURL\u0026 url,\n                              const GURL\u0026 referrer_url);\n\nvoid RestartPlatformApp(content::BrowserContext* context,\n                        const extensions::Extension* app);\n\n}  // namespace apps\n\n#endif  // APPS_LAUNCHER_H_\n"},"gob_info":{"repo":"chromium/chromium/src","commit":"65dcbb2ab5805377de065aaa1dbc87215df460f7","path":"apps/launcher.h"}}}],"elapsed_ms":15}